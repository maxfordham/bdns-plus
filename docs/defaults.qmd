---
title: Defaults
toc: true
execute:
  echo: false
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.17.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---
```{python}
from bdns_plus.models import ConfigTags, TagDef, ConfigIref, BdnsTag, BdnsTagWithType, TypeTag, InstanceTag, INSTANCE_REFERENCE_FSTRING
from IPython.display import Markdown
from bdns_plus.docs import summarise_tag_config
```

```{python}

def summarise_instance_reference_construction(config_iref: ConfigIref):
    volume_no_digits, level_no_digits = config_iref.volume_no_digits, config_iref.level_no_digits
    return f"""The instance reference for the BDNS tag is constructed from volume and level data as follows:

- Volumes are represented by {volume_no_digits}no integer digits (volume_id).
- Levels are represented by {level_no_digits}no integer digits (level_id).
- An enumerating integer value is added to ensure uniqueness for a given floor / level (level_instance_id).
- These numbers are joined without delimiter to create a unique number for a given abbreviation:
  - {INSTANCE_REFERENCE_FSTRING.replace("{", "[").replace("}", "]")}"""

```

```{python}
Markdown(summarise_tag_config(TypeTag()))
```

```{python}
Markdown(summarise_tag_config(InstanceTag()))
```

```{python}
Markdown(summarise_tag_config(BdnsTag()))
```

```{python}
config_iref = ConfigIref()
Markdown(summarise_instance_reference_construction(config_iref) )
```


## Levels and Volumes

You see that `levels` and `volumes` are set to `None` by default.
In the background, `bdns-plus` generates levels and volumes tables supporting
all numeric combinations where the level can be encoded by 2no integer digits
and the volume can be encoded by 1no integer digit >= 1. See (@tbl-levels) and (@tbl-volumes).

```{python}
#| label: tbl-volumes
from bdns_plus.gen_levels_volumes import gen_volumes_config, gen_levels_config
import pandas as pd
_ = gen_volumes_config()
df_volumes = pd.DataFrame(_[1:], columns = _[0])
df_volumes
```


```{python}
#| label: tbl-levels
_ = gen_levels_config()
df_levels = pd.DataFrame(_[1:], columns = _[0])
df_levels
```


Setting the levels and volumes explicitly allows users to:

- restrict the allowed values to a more limited set, and ensure compliance with that set
- extend the levels / volumes for extremely large projects 
(i.e. >90 floors, >9 basement floors, >9 volumes).
- add encodings for things like mezzanine levels (though this is not recommended)


