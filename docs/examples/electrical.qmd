---
title: Electrical Distribution Equipment
format:
  html:
    code-fold: true
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.17.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---
```{python}
import pandas as pd
from bdns_plus.gen_idata import gen_config_iref

from bdns_plus.tag import bdns_tag, Tag
from bdns_plus.abbreviations import get_asset_abbreviations
from bdns_plus.gen_idata import batch_gen_idata, gen_config_iref
from bdns_plus.models import ConfigIref, GenDefinition
from IPython.display import Markdown
```

```{python}
LEVEL_MIN, LEVEL_MAX, NO_VOLUMES = -1, 3, 1
config_iref = gen_config_iref(LEVEL_MIN, LEVEL_MAX, NO_VOLUMES).model_dump()
df_levels = pd.DataFrame(config_iref["levels"])
df_volumes = pd.DataFrame(config_iref["volumes"])

display(Markdown(f"""
- level_min = {LEVEL_MIN}
- level_max = {LEVEL_MAX} 
- no_volumes = {LEVEL_MAX}"""))
display(Markdown("generate project config tables:"))
```

**Levels**

```{python}
df_levels
```

**Volumes**

```{python}
df_volumes
```

```{python}
def get_electrical_system(level_min=-1, level_max=3, no_volumes=1):
    config_iref = gen_config_iref(level_min, level_max, no_volumes)
    gen_def1 = GenDefinition(abbreviation=["PB"], no_items=1, on_levels=[0], on_volumes=None)  # 1 pb in GF
    gen_def2 = GenDefinition(abbreviation=["DB", "EM"], no_items=2, on_levels=None, on_volumes=None)  # 2 dbs / floor
    gen_def3 = GenDefinition(abbreviation=["DB", "EM"], no_items=2, on_levels=[0], on_volumes=None)  # 1 pb in GF
    gen_defs = [gen_def1, gen_def2, gen_def3]

    return batch_gen_idata(gen_defs, config_iref)


idata = get_electrical_system(level_min=LEVEL_MIN, level_max=LEVEL_MAX, no_volumes=NO_VOLUMES)
map_abbreviation_description = get_asset_abbreviations()
li = []
for x in idata:
    tag = Tag(x)
    li.append(x.model_dump(mode="json") | {"asset_description":map_abbreviation_description[x.abbreviation.value], "bdns": tag.bdns, "type": tag.type, "instance": tag.instance})

cols = [
    'level',
    'level_iref',
    'volume',
    'abbreviation',
    'asset_description',
    'bdns',
    'type',
    'instance'
]
annotated_cols = pd.MultiIndex.from_tuples([("user-defined", x) if n<4 else ("generated", x) for n,x in enumerate(cols)])

df = pd.DataFrame(li).sort_values(by=["level"])
df.columns = annotated_cols
df.style
```

