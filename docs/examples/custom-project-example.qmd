---
title: Custom Project Example
format:
  html:
    code-fold: true
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.17.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
#| echo: false
%run _utils.py
```

::: {.callout-note collapse="true"}
## View shared code for generating docs examples
```python
{{< include _utils.py >}}
```
:::

## Ventilation Equipment with Project specific format

For a specific project, there was a requirement to construct the tags for ventilation equipment as follows:

- <abbreviation>.<volume_reference>.<level_reference>.<level_iref>

see examples:

- AHU.W.00.01 (AHU in West stand, Level 0, the first AHU)
- MVHW.W.01.03 (MVHW in West stand, Level 1, the third MVHW)
- TEF.E.02.01 (...)
- KEF.E.03.02


```{python}
import csv
from IPython.display import Markdown

from bdns_plus._utils import data_as_yaml_markdown
from bdns_plus.gen_idata import gen_config_iref
from bdns_plus.tag import bdns_tag, Tag
from bdns_plus.abbreviations import get_asset_abbreviations
from bdns_plus.gen_idata import batch_gen_idata, gen_config_iref, gen_levels_config, gen_volumes_config
from bdns_plus.models import ConfigIref, GenDefinition, TTagData, Level, Volume


li = """AHU
MVHR
FAN
KEF
TEF""".split("\n")
LEVEL_MIN, LEVEL_MAX, NO_VOLUMES = -1, 3, 1
li_nos = [3, 3, 4, 4, 2] # [random.randint(2, 4) for n in range(0, len(li))]

def get_vent_system(level_min=-1, level_max=3, no_volumes=1):
    config_iref = gen_config_iref(level_min, level_max, no_volumes)
    gen_def1 = GenDefinition(abbreviation=["AHU"], no_items=1, on_levels=[0], on_volumes=None)  # 1 pb in GF
    gen_def2 = GenDefinition(abbreviation=["MVHR", "TEF"], no_items=2, on_levels=None, on_volumes=None) 
    gen_def3 = GenDefinition(abbreviation=["DB", "EM"], no_items=2, on_levels=[0], on_volumes=None)  # 1 pb in GF
    gen_defs = [gen_def1, gen_def2, gen_def3]

    return batch_gen_idata(gen_defs, config_iref)

level_min, level_max = LEVEL_MIN, LEVEL_MAX



header=["code", "id", "name"]
csv_str = """N,1,North Block
E,2,East Block
S,3,South Block
W,4,North Block"""
rows = list(csv.reader(csv_str.strip().splitlines()))
volumes = [Volume(**dict(zip(header,x) )) for x in rows]
_ = gen_levels_config(level_min=level_min, level_max=level_max)
levels = [Level(**dict(zip(_[0],x) )) for x in _[1:]]
config_iref = ConfigIref(levels=levels,volumes=volumes)

Markdown(data_as_yaml_markdown(config_iref.model_dump(mode="json")))

```

```{python}
gen_def1 = GenDefinition(abbreviation=["AHU"], no_items=1, on_levels=[0], on_volumes=None)
gen_def2 = GenDefinition(abbreviation=["MVHR", "TEF"], no_items=2, on_levels=None, on_volumes=None) 
gen_def3 = GenDefinition(abbreviation=["DB", "EM"], no_items=2, on_levels=[0], on_volumes=None)
gen_defs = [gen_def1, gen_def2, gen_def3]
idata = batch_gen_idata(gen_defs, config_iref)
config = Config(**config_iref.model_dump())
get_idata_tag_table(idata, config=config)
```