---
title: Custom Project Example
format:
  html:
    code-fold: true
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.17.0
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
#| echo: false
%run _utils.py
```

::: {.callout-note collapse="true"}
## View shared code for generating docs examples
```python
{{< include _utils.py >}}
```
:::

## Ventilation Equipment with Project specific format

For a specific project, there was a requirement to construct the tags for ventilation equipment as follows:

- <abbreviation>.<volume_reference>.<level_reference>.<level_iref>

see examples:

- AHU.W.00.01 (AHU in West stand, Level 0, the first AHU)
- MVHW.W.01.03 (MVHW in West stand, Level 1, the third MVHW)
- TEF.E.02.01 (...)
- KEF.E.03.02


```{python}
import pandas as pd
import csv
from IPython.display import Markdown

from bdns_plus.docs import data_as_yaml_markdown
from bdns_plus.gen_idata import gen_config_iref
from bdns_plus.tag import bdns_tag, Tag
from bdns_plus.abbreviations import get_asset_abbreviations
from bdns_plus.gen_idata import batch_gen_idata, gen_config_iref, gen_levels_config, gen_volumes_config
from bdns_plus.models import ConfigIref, GenDefinition, TTagData, Level, Volume

LEVEL_MIN, LEVEL_MAX = 0, 3
level_min, level_max = LEVEL_MIN, LEVEL_MAX

header=["code", "id", "name"]
csv_str = """N,1,North Block
E,2,East Block
S,3,South Block
W,4,North Block"""
rows = list(csv.reader(csv_str.strip().splitlines()))
volumes = [Volume(**dict(zip(header,x) )) for x in rows]
_ = gen_levels_config(level_min=level_min, level_max=level_max)
levels = [Level(**dict(zip(_[0],x) )) for x in _[1:]]
config_iref = ConfigIref(levels=levels,volumes=volumes)
df_levels = pd.DataFrame([x.model_dump() for x in config_iref.levels]).set_index("id")
df_volumes = pd.DataFrame([x.model_dump() for x in config_iref.volumes]).set_index("id")
```

**Levels**

```{python}
#| echo: false
df_levels
```

**Volumes**

```{python}
#| echo: false
df_volumes
```


<!-- ```{python}
#| layout-ncol: 2
#| fig-cap-location: top
#| fig-cap: 
#|   - "Line Plot 1"
#|   - "Line Plot 2"

display(df_levels)
display(df_volumes)
``` -->


## Setup custom Tags

Tags are built from metadata on the object. `bdns_plus` has sensible defaults but tag definitions
can also be defined to suit the requirements of a specific project.


```{python}
from bdns_plus.models import TagDef, TagField, Config
from bdns_plus.default_fields import abbreviation_field, volume_field, level_field, level_instance_field, instance_extra_field
from bdns_plus.docs import get_idata_tag_table

fields = [
    abbreviation_field(suffix="."),
    volume_field(suffix="."),
    level_field(suffix=".", zfill=2),
    level_instance_field(suffix=".", zfill=2),
    instance_extra_field(),
]

itag_def = TagDef(
    name="vent instances",
    description="for xxx project",
    fields = fields,
)

# Markdown(data_as_yaml_markdown(itag_def.model_dump(mode="json")))
pd.DataFrame([x.model_dump() for x in itag_def.fields])
```


```{python}
gen_def1 = GenDefinition(abbreviation=["AHU"], no_items=1, on_levels=[0], on_volumes=None)
gen_def2 = GenDefinition(abbreviation=["MVHR", "TEF"], no_items=1, on_levels=None, on_volumes=None) 
gen_def3 = GenDefinition(abbreviation=["KEF", "FAN"], no_items=2, on_levels=[0], on_volumes=["N"])
gen_defs = [gen_def1, gen_def2, gen_def3]
idata = batch_gen_idata(gen_defs, config_iref)
config = Config(**config_iref.model_dump(), i_tag=itag_def)
get_idata_tag_df(*get_idata_tag_table(idata, config=config))
```