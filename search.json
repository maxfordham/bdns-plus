[
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "Code\nimport pandas as pd\nfrom bdns_plus.gen_idata import gen_config_iref\n\nfrom bdns_plus.tag import bdns_tag, Tag\nfrom bdns_plus.abbreviations import get_asset_abbreviations\nfrom bdns_plus.gen_idata import batch_gen_idata, gen_config_iref\nfrom bdns_plus.models import ConfigIref, GenDefinition\nfrom IPython.display import Markdown\n\n\n\n\nCode\nLEVEL_MIN, LEVEL_MAX, NO_VOLUMES = -1, 3, 1\nconfig_iref = gen_config_iref(LEVEL_MIN, LEVEL_MAX, NO_VOLUMES).model_dump()\ndf_levels = pd.DataFrame(config_iref[\"levels\"])\ndf_volumes = pd.DataFrame(config_iref[\"volumes\"])\n\ndisplay(Markdown(f\"\"\"\n- level_min = {LEVEL_MIN}\n- level_max = {LEVEL_MAX} \n- no_volumes = {LEVEL_MAX}\"\"\"))\ndisplay(Markdown(\"generate project config tables:\"))\n\n\n\nlevel_min = -1\nlevel_max = 3\nno_volumes = 3\n\n\n\ngenerate project config tables:\n\n\nLevels\n\n\nCode\ndf_levels\n\n\n\n\n\n\n\n\n\nlevel\nlevel_id\nlevel_name\n\n\n\n\n0\n-1\n99\nBasement 1\n\n\n1\n0\n0\nGround\n\n\n2\n1\n1\nLevel 1\n\n\n3\n2\n2\nLevel 2\n\n\n4\n3\n3\nLevel 3\n\n\n\n\n\n\n\nVolumes\n\n\nCode\ndf_volumes\n\n\n\n\n\n\n\n\n\nvolume\nvolume_id\nvolume_name\n\n\n\n\n0\n1\n1\nVolume 1\n\n\n\n\n\n\n\n\n\nCode\ndef get_electrical_system(level_min=-1, level_max=3, no_volumes=1):\n    config_iref = gen_config_iref(level_min, level_max, no_volumes)\n    gen_def1 = GenDefinition(abbreviation=[\"PB\"], no_items=1, on_levels=[0], on_volumes=None)  # 1 pb in GF\n    gen_def2 = GenDefinition(abbreviation=[\"DB\", \"EM\"], no_items=2, on_levels=None, on_volumes=None)  # 2 dbs / floor\n    gen_def3 = GenDefinition(abbreviation=[\"DB\", \"EM\"], no_items=2, on_levels=[0], on_volumes=None)  # 1 pb in GF\n    gen_defs = [gen_def1, gen_def2, gen_def3]\n\n    return batch_gen_idata(gen_defs, config_iref)\n\n\nidata = get_electrical_system(level_min=LEVEL_MIN, level_max=LEVEL_MAX, no_volumes=NO_VOLUMES)\nmap_abbreviation_description = get_asset_abbreviations()\nli = []\nfor x in idata:\n    tag = Tag(x)\n    li.append(x.model_dump(mode=\"json\") | {\"asset_description\":map_abbreviation_description[x.abbreviation.value], \"bdns\": tag.bdns, \"type\": tag.type, \"instance\": tag.instance})\n\ncols = [\n    'level',\n    'level_iref',\n    'volume',\n    'abbreviation',\n    'asset_description',\n    'bdns',\n    'type',\n    'instance'\n]\nannotated_cols = pd.MultiIndex.from_tuples([(\"user-defined\", x) if n&lt;4 else (\"generated\", x) for n,x in enumerate(cols)])\n\ndf = pd.DataFrame(li).sort_values(by=[\"level\"])\ndf.columns = annotated_cols\ndf.style\n\n\n\n\n\n\n\n \nuser-defined\ngenerated\n\n\n \nlevel\nlevel_iref\nvolume\nabbreviation\nasset_description\nbdns\ntype\ninstance\n\n\n\n\n1\n-1\n1\n1\nDB\nelectric distribution - distribution panel / board\nDB-1991\nDB\nDB/1/-1/1\n\n\n2\n-1\n1\n1\nEM\nmeter - electric meter\nEM-1991\nEM\nEM/1/-1/1\n\n\n3\n-1\n2\n1\nDB\nelectric distribution - distribution panel / board\nDB-1992\nDB\nDB/1/-1/2\n\n\n4\n-1\n2\n1\nEM\nmeter - electric meter\nEM-1992\nEM\nEM/1/-1/2\n\n\n0\n0\n1\n1\nPB\nelectric distribution - panel board\nPB-1001\nPB\nPB/1/0/1\n\n\n5\n0\n1\n1\nDB\nelectric distribution - distribution panel / board\nDB-1001\nDB\nDB/1/0/1\n\n\n6\n0\n1\n1\nEM\nmeter - electric meter\nEM-1001\nEM\nEM/1/0/1\n\n\n7\n0\n2\n1\nDB\nelectric distribution - distribution panel / board\nDB-1002\nDB\nDB/1/0/2\n\n\n8\n0\n2\n1\nEM\nmeter - electric meter\nEM-1002\nEM\nEM/1/0/2\n\n\n21\n0\n1\n1\nDB\nelectric distribution - distribution panel / board\nDB-1001\nDB\nDB/1/0/1\n\n\n23\n0\n2\n1\nDB\nelectric distribution - distribution panel / board\nDB-1002\nDB\nDB/1/0/2\n\n\n22\n0\n1\n1\nEM\nmeter - electric meter\nEM-1001\nEM\nEM/1/0/1\n\n\n24\n0\n2\n1\nEM\nmeter - electric meter\nEM-1002\nEM\nEM/1/0/2\n\n\n9\n1\n1\n1\nDB\nelectric distribution - distribution panel / board\nDB-1011\nDB\nDB/1/1/1\n\n\n10\n1\n1\n1\nEM\nmeter - electric meter\nEM-1011\nEM\nEM/1/1/1\n\n\n11\n1\n2\n1\nDB\nelectric distribution - distribution panel / board\nDB-1012\nDB\nDB/1/1/2\n\n\n12\n1\n2\n1\nEM\nmeter - electric meter\nEM-1012\nEM\nEM/1/1/2\n\n\n15\n2\n2\n1\nDB\nelectric distribution - distribution panel / board\nDB-1022\nDB\nDB/1/2/2\n\n\n13\n2\n1\n1\nDB\nelectric distribution - distribution panel / board\nDB-1021\nDB\nDB/1/2/1\n\n\n14\n2\n1\n1\nEM\nmeter - electric meter\nEM-1021\nEM\nEM/1/2/1\n\n\n16\n2\n2\n1\nEM\nmeter - electric meter\nEM-1022\nEM\nEM/1/2/2\n\n\n19\n3\n2\n1\nDB\nelectric distribution - distribution panel / board\nDB-1032\nDB\nDB/1/3/2\n\n\n17\n3\n1\n1\nDB\nelectric distribution - distribution panel / board\nDB-1031\nDB\nDB/1/3/1\n\n\n18\n3\n1\n1\nEM\nmeter - electric meter\nEM-1031\nEM\nEM/1/3/1\n\n\n20\n3\n2\n1\nEM\nmeter - electric meter\nEM-1032\nEM\nEM/1/3/2"
  },
  {
    "objectID": "compare-ifc4_3.html",
    "href": "compare-ifc4_3.html",
    "title": "Compare BDNS Abbreviations vs ifc4x3 classes",
    "section": "",
    "text": "Comparison\n\nimport pandas as pd\nimport pathlib\nfrom bsdd import Client\nfrom bdns_plus.abbreviations import get_bdns_asset_abbreviations\nfrom itables import show\nimport pandas as pd\n\nIFC4X3_URI = \"https://identifier.buildingsmart.org/uri/buildingsmart/ifc/4.3\"\n# BDNS_REGISTER = pathlib.Path(__file__).parent.parent / \"BDNS_Abbreviations_Register.csv\"\n\ndef get_ifc_classes(client):\n    def get_batch(i):\n        return client.get_classes(\n            IFC4X3_URI,\n            use_nested_classes=False,\n            class_type=\"Class\",\n            offset=i[0],\n            limit=i[1],\n        )[\"classes\"]\n\n    ifc_classes = {}\n    for i in [(0, 1000), (1000, 2000)]:  # 1418 classes in total. 1000 max request limit\n        ifc_classes = ifc_classes | {x[\"code\"]: x for x in get_batch(i)}\n    return ifc_classes\n\n\nclient = Client()\nifc_classes = get_ifc_classes(client)\nbdns_abbreviations = get_bdns_asset_abbreviations()\n\nmap_bdns_ifc = {x[1]: x[-2] for x in bdns_abbreviations[1:]}\nifc_in_bdns = set([x[-2] for x in bdns_abbreviations[1:]])\n\nmap_ifc_bdns = {}\nfor ifc in ifc_in_bdns:\n    map_ifc_bdns[ifc] = [k for k,v in map_bdns_ifc.items() if v == ifc]\n\n_map_ifc_bdns = {k: [str(v)] for k, v in map_ifc_bdns.items()}\ndf_ifc_map_bdns = pd.DataFrame.from_dict(_map_ifc_bdns).T.reset_index().rename(columns={\"index\":\"ifc4_3\", 0:\"bdns_abbreviation\"})\nshow(df_ifc_map_bdns)\n\n\n\n    \n      \n      ifc4_3\n      bdns_abbreviation\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.3.0 from the internet...\n(need help?)\n\n\n\n\n\n\n\nprint(f\"number of unique ifc classes including enums: {len(ifc_classes)}\")\nprint(f\"number of unique ifc classes in bdns: {len(ifc_in_bdns)}\")\n\nnumber of unique ifc classes including enums: 1418\nnumber of unique ifc classes in bdns: 215\n\n\n\n# ifc_classes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "",
    "text": "BDNS (Building Device Naming Syntax) plus a consistent and configurable approach to producing equipment references for Design Information (drawings, schedules, specifications)."
  },
  {
    "objectID": "index.html#language",
    "href": "index.html#language",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "Language",
    "text": "Language\nThe key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in RFC 2119."
  },
  {
    "objectID": "index.html#definition-of-terms",
    "href": "index.html#definition-of-terms",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "Definition of Terms",
    "text": "Definition of Terms\n\nproject - a construction project. It may be multi-stage and may have multiple buildings. The client will be the same and typically the project team will be the same.\nvolume - a section of a project. For a single building project it typically has 1 volume. For a multi-building project each building will be a volume. External landscaping may be a separate volume.\nlevel - a floor of a building.\ntype - a specific type of equipment, i.e. an item with a defined model number that can ultimately be purchased.\ninstance - a specific piece of equipment / asset within a project. Every asset is unique."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "Overview",
    "text": "Overview\nA definition of the properties required for equipment tagging for the digital identification equipment for use in the design, construction and management of buildings.\nIt is designed to be an opinionated superset of the BDNS standard. The focus of this standard is to simultaneously provide a unique, machine-readable identifier for each asset as well as a human-readable and intuitive tag that can be used on drawings and other design information. Whilst the BDNS standard MAY be used as is for equipment tagging on drawing and at later stages in asset management systems, the formation of the bdns_tag is not consistent with many project drawing standards. This standard aims to consistently define the properties that MUST be recorded for each asset, and from this information it MUST be possible to generate a compliant bdns_tag. The same properties MUST then be used to create a more flexible / human-readable type_tag and instance_tag for equipment references/tags on drawings. Using this approach it is possible to apply BDNS a compliant methodology on a larger number of projects, improving standardisation and leading to a potential value-add if the projects considers a BDNS compliant asset solution at the later stages of the project.\nIn simplest terms, this standard defines that for each item of equipment, its type must be defined and its approximate location must be defined. By definition, the mimumum information that MUST be recorded is:\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nabbreviation\nType\nuppercase alphabetic, 2-6 chars\nindicates equipment type\n\n\ntype_id\nType\npositive integer\nrefers to a specific equipment type\n\n\nvolume_id\nInstance\npositive integer\nindicates the volume within a project the equipment is situated\n\n\nlevel_id\nInstance\npositive integer\nindicates the level within a project the equipment is situated\n\n\nlevel_instance_id\nInstance\npositive integer\na numerical indentifyer for a specific piece of equipment within a volume and level\n\n\n\nParameters with property type, Type (abbreviation and type_id) would be the same for every identical item of equipment. Parameters with property type, Instance (volume_id, level_id and level_instance_id), define a specific instance of equipment within a project and the combination of these paramenters and abbreviation MUST be unique.\nThe tagging properties can used to generate:\n\na type tag. to indicate the type of a given asset/piece of equipment.\n\nthis is unique to the equipemnt type only, there may be many instances of this type in a building.\nas an example, this is typically used on lighting layouts where many luminaires of the same type are used.\n\na instance tag. this is MUST be unique to an individual asset within a project.\n\nit is directly interchangeable with the bdns tag (and MAY be the same).\nits focus is on legibility and ease of use for humans.\n\na BDNS tag. this is MUST be unique to an individual asset within a project.\n\nits focus is on legibility and ease of use for humans and machines.\n\n\nIt is acknowledged that positive integers are a restrictive format to communicate volume and level information, and that this may not be the best way to communicate this information to a user. In the sections below a description is given about how a software system can be used to convert between the volume_id, level_id and level_instance_id and a more human-readable format."
  },
  {
    "objectID": "index.html#type-tag",
    "href": "index.html#type-tag",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "Type Tag",
    "text": "Type Tag\nThe type_tag is used to indicate the type of a given asset/piece of equipment on design information. For a given Type of equipment, the combination of the abbreviation and type_id MUST be unique. There MAY be many instances of eqipment of the same type within a project and therefore many indentical type_tags. The type_id and abbreviation MUST be combined without a delimiter to create a unique_type_reference. Extra information about the equipment type MAY be stored in the type_extra property. The type_tag MUST include the unique_type_reference and MAY include the type_extra field, if type_extra is included it MUST be delimited from the unique_type_reference with a type_extra_delimiter character.\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nunique_type_reference\nType\nuppercase alphabetic, 2-6 chars\ncombines abbreviation and type_id to create a unique_type_reference\n\n\ntype_extra\nType\nstring\nused to indicate extra type information. e.g. type_extra=“E” good indicate and emergency light fitting\n\n\ntype_extra_delimiter\nN/A\nstring character\nused to delimit unique_type_reference and type_extra\n\n\ntype_tag\nType\nstring\nMUST contain unique_type_reference and MAY contain type_extra\n\n\n\n\ntype_tag Valid Implementations\n\ntype_tag = unique_type_reference\ntype_tag = unique_type_reference + type_extra_delimiter + type_extra\n\n\n\ntype_tag Example\n\nabbreviation = LT, type_id = 1, type_extra = E, type_extra_delimiter = /\n\n=&gt; unique_type_reference = LT1\n=&gt; type_tag = LT1/E\n\nabbreviation = RAD, type_id = 3, type_extra = None, type_extra_delimiter = /\n\n=&gt; unique_type_reference = RAD3\n=&gt; type_tag = RAD3"
  },
  {
    "objectID": "index.html#instance-tag",
    "href": "index.html#instance-tag",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "Instance Tag",
    "text": "Instance Tag\nThe instance tag is used to indicate a specific instance of equipment within a project. For a given unique item of equipment in a project, the instance_tag MUST be unique. The instance_tag SHOULD indicate the equipment abbreviation, the volume, level and level_instance_id. The instance_tag MAY be the same as the bdns_tag.\nThe volume_id MAY be mapped to a human-readable volume_reference and the level_id MAY be mapped to a human-readable level_reference. Where a mapped volume_reference and level_reference is used, a level_name and volume_name MAY also be provided. Extra information about the equipment instance MAY be stored in the instance_extra property. For legibility, the unique_instance_reference MAY be formatted with a delimiter (instance_tag_delimiter) between the abbreviation, volume_reference, level_reference and level_instance_id. The unique_instance_reference MUST serialisable / deserialisable to / from the bdns_tag. The instance_tag MUST include the unique_instance_reference and MAY include the instance_extra field. Where there is only 1no project volume, the volume_reference MAY be omitted from the instance_tag.\nIt is RECOMMENDED that when mapping the level_id to the level_reference, mezzanine levels are ignored. This is because mezzanine levels are 1/2 levels, and there is no logical way to represent these in the level_id field which must be a positive integer.\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nlevel_reference\nInstance\nstring or integer\nindicates the level. maps to the level_id field. -ve numbers and strings allowed.\n\n\nvolume_reference\nInstance\nstring or integer\nunique reference to a given piece of equipment, which encodes type, level and volume\n\n\nlevel_name\nInstance\nstring\ncombined with abbreviation creates a unique reference to an item of equipment\n\n\nvolume_name\nInstance\nstring\nunique reference to a given piece of equipment, which encodes type, level and volume\n\n\ninstance_tag_delimiter\nN/A\nstring character\nused to delimit abbreviation, volume_reference, level_reference and level_instance_id\n\n\nunique_instance_reference\nInstance\nstring\ncombines abbreviation, volume, level and level_instance_id to create a unique reference to an item of equipment\n\n\ninstance_tag\nInstance\nstring\nunique_instance_reference, and MAY also show instance_extra information\n\n\ninstance_extra\nInstance\nstring\ncontains additional information about an instance. MAY be shown on instance_tag\n\n\ninstance_extra_delimiter\nN/A\nstring character\nused to delimit unique_instance_reference and instance_extra\n\n\n\n\ninstance_tag Valid Implementations\n\nunique_instance_reference = abbreviation + instance_tag_delimiter + volume_reference + instance_tag_delimiter + level_reference + instance_tag_delimiter + level_instance_id\ninstance_tag = unique_instance_reference + instance_extra_delimiter + instance_extra\n\n\n\ninstance_tag Example\n\nabbreviation = LT, volume_id = 1, level_id = 0, level_instance_id = 1, instance_extra = E, instance_extra_delimiter = /, instance_tag_delimiter = _\n\n=&gt; volume_reference = A, level_reference = GF\n=&gt; unique_instance_reference = LT/A/GF/1\n=&gt; instance_tag = LT/A/GF/1_E"
  },
  {
    "objectID": "index.html#bdns-tag",
    "href": "index.html#bdns-tag",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "BDNS Tag",
    "text": "BDNS Tag\nFor a given abbreviation, the volume_id, level_id and level_instance_id MUST be combined to create a unique identifier (instance_id) for each piece of equipment. NOTE. This unique number MUST be independent of the specific equipment type (type_id).\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\ninstance_id\nInstance\npositive integer\ncombined with abbreviation creates a unique reference to an item of equipment\n\n\nbdns_tag\nInstance\nstring\nunique reference to a given piece of equipment, which encodes abbreviation, level and volume\n\n\n\nIt MUST be possible to serialise and deserialise between [volume_id, level_id and level_instance_id] and [instance_id] to create a unique identifier for each piece of equipment.\nIt SHOULD be simple to a user interogating the instance_id how to determine the volume_id, level_id and level_instance_id.\n\ne.g. instance_id = 1001 would be volume_id = 1, level_id = 0 and level_instance_id = 1.\n\n\nbdns_tag Valid Implementations\n\nbdns_tag = abbreviation + “-” + instance_id\nbdns_tag = unique_type_reference + “-” + instance_id\n\n\n\nEquipment Specific Tagging Methodologies\nProjects SHOULD define a method for tagging equipment that is consistent across all equipment types. Projects MAY customise how the tag is constructed based on the equipment type if required."
  },
  {
    "objectID": "index.html#project-configuration",
    "href": "index.html#project-configuration",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "Project Configuration",
    "text": "Project Configuration"
  },
  {
    "objectID": "index.html#related-work",
    "href": "index.html#related-work",
    "title": "BDNS-plus (WIP - NEEDS REDRAFTING)",
    "section": "Related Work",
    "text": "Related Work\n\nextends BDNS (Building Device Naming Syntax)\nformalises some of the logic outlined by TheFridgeShaman in this discussion"
  },
  {
    "objectID": "standard.html",
    "href": "standard.html",
    "title": "BDNS-plus (WIP)",
    "section": "",
    "text": "BDNS (Building Device Naming Syntax) plus a consistent and configurable approach to producing equipment references for Design Information (drawings, schedules, specifications)."
  },
  {
    "objectID": "standard.html#language",
    "href": "standard.html#language",
    "title": "BDNS-plus (WIP)",
    "section": "Language",
    "text": "Language\nThe key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in RFC 2119."
  },
  {
    "objectID": "standard.html#definition-of-terms",
    "href": "standard.html#definition-of-terms",
    "title": "BDNS-plus (WIP)",
    "section": "Definition of Terms",
    "text": "Definition of Terms\n\nproject - a construction project. It may be multi-stage and may have multiple buildings. The client will be the same and typically the project team will be the same.\nvolume - a section of a project. For a single building project it typically has 1 volume. For a multi-building project each building will be a volume. External landscaping may be a separate volume.\nlevel - a floor of a building.\ntype - a specific type of equipment, i.e. an item with a defined model number that can ultimately be purchased.\ninstance - a specific piece of equipment / asset within a project. Every asset is unique."
  },
  {
    "objectID": "standard.html#overview",
    "href": "standard.html#overview",
    "title": "BDNS-plus (WIP)",
    "section": "Overview",
    "text": "Overview\nA definition of the properties required for equipment tagging for the digital identification equipment for use in the design, construction and management of buildings.\nIt is designed to be an opinionated superset of the BDNS standard. The focus of this standard is to simultaneously provide a unique, machine-readable identifier for each asset as well as a human-readable and intuitive tag that can be used on drawings and other design information. Whilst the BDNS standard MAY be used as is for equipment tagging on drawing and at later stages in asset management systems, the formation of the bdns_tag is not consistent with many project drawing standards. This standard aims to consistently define the properties that MUST be recorded for each asset, and from this information it MUST be possible to generate a compliant bdns_tag. The same properties MUST then be used to create a more flexible / human-readable type_tag and instance_tag for equipment references/tags on drawings. Using this approach it is possible to apply BDNS a compliant methodology on a larger number of projects, improving standardisation and leading to a potential value-add if the projects considers a BDNS compliant asset solution at the later stages of the project.\nIn simplest terms, this standard defines that for each item of equipment, its type must be defined and its approximate location must be defined. By definition, the mimumum information that MUST be recorded is:\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nabbreviation\nType\nuppercase alphabetic, 2-6 chars\nindicates equipment type\n\n\ntype_id\nType\npositive integer\nrefers to a specific equipment type\n\n\nvolume_id\nInstance\npositive integer\nindicates the volume within a project the equipment is situated\n\n\nlevel_id\nInstance\npositive integer\nindicates the level within a project the equipment is situated\n\n\nlevel_instance_id\nInstance\npositive integer\na numerical indentifyer for a specific piece of equipment within a volume and level\n\n\n\nParameters with property type, Type (abbreviation and type_id) would be the same for every identical item of equipment. Parameters with property type, Instance (volume_id, level_id and level_instance_id), define a specific instance of equipment within a project and the combination of these paramenters and abbreviation MUST be unique.\nThe tagging properties can used to generate:\n\na type tag. to indicate the type of a given asset/piece of equipment.\n\nthis is unique to the equipemnt type only, there may be many instances of this type in a building.\nas an example, this is typically used on lighting layouts where many luminaires of the same type are used.\n\na instance tag. this is MUST be unique to an individual asset within a project.\n\nit is directly interchangeable with the bdns tag (and MAY be the same).\nits focus is on legibility and ease of use for humans.\n\na BDNS tag. this is MUST be unique to an individual asset within a project.\n\nits focus is on legibility and ease of use for humans and machines.\n\n\nIt is acknowledged that positive integers are a restrictive format to communicate volume and level information, and that this may not be the best way to communicate this information to a user. In the sections below a description is given about how a software system can be used to convert between the volume_id, level_id and level_instance_id and a more human-readable format."
  },
  {
    "objectID": "standard.html#type-tag",
    "href": "standard.html#type-tag",
    "title": "BDNS-plus (WIP)",
    "section": "Type Tag",
    "text": "Type Tag\nThe type_tag is used to indicate the type of a given asset/piece of equipment on design information. For a given Type of equipment, the combination of the abbreviation and type_id MUST be unique. There MAY be many instances of eqipment of the same type within a project and therefore many indentical type_tags. The type_id and abbreviation MUST be combined without a delimiter to create a unique_type_reference. Extra information about the equipment type MAY be stored in the type_extra property. The type_tag MUST include the unique_type_reference and MAY include the type_extra field, if type_extra is included it MUST be delimited from the unique_type_reference with a type_extra_delimiter character.\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nunique_type_reference\nType\nuppercase alphabetic, 2-6 chars\ncombines abbreviation and type_id to create a unique_type_reference\n\n\ntype_extra\nType\nstring\nused to indicate extra type information. e.g. type_extra=“E” good indicate and emergency light fitting\n\n\ntype_extra_delimiter\nN/A\nstring character\nused to delimit unique_type_reference and type_extra\n\n\ntype_tag\nType\nstring\nMUST contain unique_type_reference and MAY contain type_extra\n\n\n\n\ntype_tag Valid Implementations\n\ntype_tag = unique_type_reference\ntype_tag = unique_type_reference + type_extra_delimiter + type_extra\n\n\n\ntype_tag Example\n\nabbreviation = LT, type_id = 1, type_extra = E, type_extra_delimiter = /\n\n=&gt; unique_type_reference = LT1\n=&gt; type_tag = LT1/E\n\nabbreviation = RAD, type_id = 3, type_extra = None, type_extra_delimiter = /\n\n=&gt; unique_type_reference = RAD3\n=&gt; type_tag = RAD3"
  },
  {
    "objectID": "standard.html#instance-tag",
    "href": "standard.html#instance-tag",
    "title": "BDNS-plus (WIP)",
    "section": "Instance Tag",
    "text": "Instance Tag\nThe instance tag is used to indicate a specific instance of equipment within a project. For a given unique item of equipment in a project, the instance_tag MUST be unique. The instance_tag SHOULD indicate the equipment abbreviation, the volume, level and level_instance_id. The instance_tag MAY be the same as the bdns_tag.\nThe volume_id MAY be mapped to a human-readable volume_reference and the level_id MAY be mapped to a human-readable level_reference. Where a mapped volume_reference and level_reference is used, a level_name and volume_name MAY also be provided. Extra information about the equipment instance MAY be stored in the instance_extra property. For legibility, the unique_instance_reference MAY be formatted with a delimiter (instance_tag_delimiter) between the abbreviation, volume_reference, level_reference and level_instance_id. The unique_instance_reference MUST serialisable / deserialisable to / from the bdns_tag. The instance_tag MUST include the unique_instance_reference and MAY include the instance_extra field. Where there is only 1no project volume, the volume_reference MAY be omitted from the instance_tag.\nIt is RECOMMENDED that when mapping the level_id to the level_reference, mezzanine levels are ignored. This is because mezzanine levels are 1/2 levels, and there is no logical way to represent these in the level_id field which must be a positive integer.\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nlevel_reference\nInstance\nstring or integer\nindicates the level. maps to the level_id field. -ve numbers and strings allowed.\n\n\nvolume_reference\nInstance\nstring or integer\nunique reference to a given piece of equipment, which encodes type, level and volume\n\n\nlevel_name\nInstance\nstring\ncombined with abbreviation creates a unique reference to an item of equipment\n\n\nvolume_name\nInstance\nstring\nunique reference to a given piece of equipment, which encodes type, level and volume\n\n\ninstance_tag_delimiter\nN/A\nstring character\nused to delimit abbreviation, volume_reference, level_reference and level_instance_id\n\n\nunique_instance_reference\nInstance\nstring\ncombines abbreviation, volume, level and level_instance_id to create a unique reference to an item of equipment\n\n\ninstance_tag\nInstance\nstring\nunique_instance_reference, and MAY also show instance_extra information\n\n\ninstance_extra\nInstance\nstring\ncontains additional information about an instance. MAY be shown on instance_tag\n\n\ninstance_extra_delimiter\nN/A\nstring character\nused to delimit unique_instance_reference and instance_extra\n\n\n\n\ninstance_tag Valid Implementations\n\nunique_instance_reference = abbreviation + instance_tag_delimiter + volume_reference + instance_tag_delimiter + level_reference + instance_tag_delimiter + level_instance_id\ninstance_tag = unique_instance_reference + instance_extra_delimiter + instance_extra\n\n\n\ninstance_tag Example\n\nabbreviation = LT, volume_id = 1, level_id = 0, level_instance_id = 1, instance_extra = E, instance_extra_delimiter = /, instance_tag_delimiter = _\n\n=&gt; volume_reference = A, level_reference = GF\n=&gt; unique_instance_reference = LT/A/GF/1\n=&gt; instance_tag = LT/A/GF/1_E"
  },
  {
    "objectID": "standard.html#bdns-tag",
    "href": "standard.html#bdns-tag",
    "title": "BDNS-plus (WIP)",
    "section": "BDNS Tag",
    "text": "BDNS Tag\nFor a given abbreviation, the volume_id, level_id and level_instance_id MUST be combined to create a unique identifier (instance_id) for each piece of equipment. NOTE. This unique number MUST be independent of the specific equipment type (type_id).\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\ninstance_id\nInstance\npositive integer\ncombined with abbreviation creates a unique reference to an item of equipment\n\n\nbdns_tag\nInstance\nstring\nunique reference to a given piece of equipment, which encodes abbreviation, level and volume\n\n\n\nIt MUST be possible to serialise and deserialise between [volume_id, level_id and level_instance_id] and [instance_id] to create a unique identifier for each piece of equipment.\nIt SHOULD be simple to a user interogating the instance_id how to determine the volume_id, level_id and level_instance_id.\n\ne.g. instance_id = 1001 would be volume_id = 1, level_id = 0 and level_instance_id = 1.\n\n\nbdns_tag Valid Implementations\n\nbdns_tag = abbreviation + “-” + instance_id\nbdns_tag = unique_type_reference + “-” + instance_id\n\n\n\nEquipment Specific Tagging Methodologies\nProjects SHOULD define a method for tagging equipment that is consistent across all equipment types. Projects MAY customise how the tag is constructed based on the equipment type if required."
  },
  {
    "objectID": "standard.html#project-configuration",
    "href": "standard.html#project-configuration",
    "title": "BDNS-plus (WIP)",
    "section": "Project Configuration",
    "text": "Project Configuration"
  },
  {
    "objectID": "standard.html#related-work",
    "href": "standard.html#related-work",
    "title": "BDNS-plus (WIP)",
    "section": "Related Work",
    "text": "Related Work\n\nextends BDNS (Building Device Naming Syntax)\nformalises some of the logic outlined by TheFridgeShaman in this discussion"
  }
]