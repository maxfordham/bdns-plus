[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BDNS-plus (WIP)",
    "section": "",
    "text": "BDNS (Building Device Naming Syntax) ➕ equipment tagging. bdns-plus extends BDNS to define a consistent and configurable approach to producing equipment references for Design Information (drawings, schedules, specifications)."
  },
  {
    "objectID": "index.html#language",
    "href": "index.html#language",
    "title": "BDNS-plus (WIP)",
    "section": "Language",
    "text": "Language\nThe key words MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in RFC 2119."
  },
  {
    "objectID": "index.html#definition-of-terms",
    "href": "index.html#definition-of-terms",
    "title": "BDNS-plus (WIP)",
    "section": "Definition of Terms",
    "text": "Definition of Terms\n\nproject - a construction project. It may be multi-stage and may have multiple buildings. The client will be the same and typically the project team will be the same.\nvolume - a section of a project. For a single building project it typically has 1 volume. For a multi-building project each building will be a volume. External landscaping may be a separate volume.\nlevel - a floor of a building.\ntype - a specific type of equipment, i.e. an item with a defined model number that can ultimately be purchased.\ninstance - a specific piece of equipment / asset within a project. Every asset is unique.\nWIP system_type - what system type a piece of equipment belongs to (e.g. a radiator would below to LTHW system type)\nWIP system_id - the specific system that a piece of equipment belongs to. For electrical systems this parameter isn’t used as typically all electrical appliances will connect back a common point (the utilities connection), but for closed mechanical systems (e.g. LTHW systems) it is possible/common to have multiple distinct closed systems within a single project."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "BDNS-plus (WIP)",
    "section": "Overview",
    "text": "Overview\nA definition of the properties required for equipment tagging for the digital identification equipment for use in the design, construction and management of buildings.\nIt is designed to be an opinionated superset of the BDNS standard. The focus of this standard is to simultaneously provide a unique, machine-readable identifier for each asset as well as a human-readable and intuitive tag that can be used on drawings and other design information. Whilst the BDNS standard MAY be used as is for equipment tagging on drawing and at later stages in asset management systems, the formation of the bdns_tag is not consistent with many project drawing standards. This standard aims to consistently define the properties that MUST be recorded for each asset, and from this information it MUST be possible to generate a compliant bdns_tag. The same properties MUST then be used to create a more flexible / human-readable type_tag and instance_tag for equipment references/tags on drawings. Using this approach it is possible to apply BDNS a compliant methodology on a larger number of projects, improving standardisation and leading to a potential value-add if the projects considers a BDNS compliant asset solution at the later stages of the project.\nIn simplest terms, this standard defines that for each item of equipment, its type must be defined and its approximate location must be defined. By definition, the mimumum information that MUST be recorded is:\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nabbreviation\nType\nuppercase alphabetic, 2-6 chars\nindicates equipment type\n\n\ntype_id\nType\npositive integer\nrefers to a specific equipment type\n\n\nvolume_id\nInstance\npositive integer\nindicates the volume within a project the equipment is situated\n\n\nlevel_id\nInstance\npositive integer\nindicates the level within a project the equipment is situated\n\n\nlevel_instance_id\nInstance\npositive integer\na numerical indentifyer for a specific piece of equipment within a volume and level\n\n\n\nParameters with property type, Type (abbreviation and type_id) would be the same for every identical item of equipment. Parameters with property type, Instance (volume_id, level_id and level_instance_id), define a specific instance of equipment within a project and the combination of these paramenters and abbreviation MUST be unique.\nThe tagging properties can used to generate:\n\na type tag. to indicate the type of a given asset/piece of equipment.\n\nthis is unique to the equipemnt type only, there may be many instances of this type in a building.\nas an example, this is typically used on lighting layouts where many luminaires of the same type are used.\n\na instance tag. this is MUST be unique to an individual asset within a project.\n\nit is directly interchangeable with the bdns tag (and MAY be the same).\nits focus is on legibility and ease of use for humans.\n\na BDNS tag. this is MUST be unique to an individual asset within a project.\n\nits focus is on legibility and ease of use for humans and machines.\n\n\nIt is acknowledged that positive integers are a restrictive format to communicate volume and level information, and that this may not be the best way to communicate this information to a user. In the sections below a description is given about how a software system can be used to convert between the volume_id, level_id and level_instance_id and a more human-readable format."
  },
  {
    "objectID": "index.html#type-tag",
    "href": "index.html#type-tag",
    "title": "BDNS-plus (WIP)",
    "section": "Type Tag",
    "text": "Type Tag\nThe type_tag is used to indicate the type of a given asset/piece of equipment on design information. For a given Type of equipment, the combination of the abbreviation and type_id MUST be unique. There MAY be many instances of eqipment of the same type within a project and therefore many indentical type_tags. The type_id and abbreviation MUST be combined without a delimiter to create a unique_type_reference. Extra information about the equipment type MAY be stored in the type_extra property. The type_tag MUST include the unique_type_reference and MAY include the type_extra field, if type_extra is included it MUST be delimited from the unique_type_reference with a type_extra_delimiter character.\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nunique_type_reference\nType\nuppercase alphabetic, 2-6 chars\ncombines abbreviation and type_id to create a unique_type_reference\n\n\ntype_extra\nType\nstring\nused to indicate extra type information. e.g. type_extra=“E” good indicate and emergency light fitting\n\n\ntype_extra_delimiter\nN/A\nstring character\nused to delimit unique_type_reference and type_extra\n\n\ntype_tag\nType\nstring\nMUST contain unique_type_reference and MAY contain type_extra\n\n\n\n\ntype_tag Valid Implementations\n\ntype_tag = unique_type_reference\ntype_tag = unique_type_reference + type_extra_delimiter + type_extra\n\n\n\ntype_tag Example\n\nabbreviation = LT, type_id = 1, type_extra = E, type_extra_delimiter = /\n\n=&gt; unique_type_reference = LT1\n=&gt; type_tag = LT1/E\n\nabbreviation = RAD, type_id = 3, type_extra = None, type_extra_delimiter = /\n\n=&gt; unique_type_reference = RAD3\n=&gt; type_tag = RAD3"
  },
  {
    "objectID": "index.html#instance-tag",
    "href": "index.html#instance-tag",
    "title": "BDNS-plus (WIP)",
    "section": "Instance Tag",
    "text": "Instance Tag\nThe instance tag is used to indicate a specific instance of equipment within a project. For a given unique item of equipment in a project, the instance_tag MUST be unique. The instance_tag SHOULD indicate the equipment abbreviation, the volume, level and level_instance_id. The instance_tag MAY be the same as the bdns_tag.\nThe volume_id MAY be mapped to a human-readable volume_reference and the level_id MAY be mapped to a human-readable level_reference. Where a mapped volume_reference and level_reference is used, a level_name and volume_name MAY also be provided. Extra information about the equipment instance MAY be stored in the instance_extra property. For legibility, the unique_instance_reference MAY be formatted with a delimiter (instance_tag_delimiter) between the abbreviation, volume_reference, level_reference and level_instance_id. The unique_instance_reference MUST serialisable / deserialisable to / from the bdns_tag. The instance_tag MUST include the unique_instance_reference and MAY include the instance_extra field. Where there is only 1no project volume, the volume_reference MAY be omitted from the instance_tag.\nIt is RECOMMENDED that when mapping the level_id to the level_reference, mezzanine levels are ignored. This is because mezzanine levels are 1/2 levels, and there is no logical way to represent these in the level_id field which must be a positive integer.\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\nlevel_reference\nInstance\nstring or integer\nindicates the level. maps to the level_id field. -ve numbers and strings allowed.\n\n\nvolume_reference\nInstance\nstring or integer\nunique reference to a given piece of equipment, which encodes type, level and volume\n\n\nlevel_name\nInstance\nstring\ncombined with abbreviation creates a unique reference to an item of equipment\n\n\nvolume_name\nInstance\nstring\nunique reference to a given piece of equipment, which encodes type, level and volume\n\n\ninstance_tag_delimiter\nN/A\nstring character\nused to delimit abbreviation, volume_reference, level_reference and level_instance_id\n\n\nunique_instance_reference\nInstance\nstring\ncombines abbreviation, volume, level and level_instance_id to create a unique reference to an item of equipment\n\n\ninstance_tag\nInstance\nstring\nunique_instance_reference, and MAY also show instance_extra information\n\n\ninstance_extra\nInstance\nstring\ncontains additional information about an instance. MAY be shown on instance_tag\n\n\ninstance_extra_delimiter\nN/A\nstring character\nused to delimit unique_instance_reference and instance_extra\n\n\n\n\ninstance_tag Valid Implementations\n\nunique_instance_reference = abbreviation + instance_tag_delimiter + volume_reference + instance_tag_delimiter + level_reference + instance_tag_delimiter + level_instance_id\ninstance_tag = unique_instance_reference + instance_extra_delimiter + instance_extra\n\n\n\ninstance_tag Example\n\nabbreviation = LT, volume_id = 1, level_id = 0, level_instance_id = 1, instance_extra = E, instance_extra_delimiter = /, instance_tag_delimiter = _\n\n=&gt; volume_reference = A, level_reference = GF\n=&gt; unique_instance_reference = LT/A/GF/1\n=&gt; instance_tag = LT/A/GF/1_E"
  },
  {
    "objectID": "index.html#bdns-tag",
    "href": "index.html#bdns-tag",
    "title": "BDNS-plus (WIP)",
    "section": "BDNS Tag",
    "text": "BDNS Tag\nFor a given abbreviation, the volume_id, level_id and level_instance_id MUST be combined to create a unique identifier (instance_id) for each piece of equipment. NOTE. This unique number MUST be independent of the specific equipment type (type_id).\n\n\n\n\n\n\n\n\n\nproperty name\nproperty type\ndata type\ndescription\n\n\n\n\ninstance_id\nInstance\npositive integer\ncombined with abbreviation creates a unique reference to an item of equipment\n\n\nbdns_tag\nInstance\nstring\nunique reference to a given piece of equipment, which encodes abbreviation, level and volume\n\n\n\nIt MUST be possible to serialise and deserialise between [volume_id, level_id and level_instance_id] and [instance_id] to create a unique identifier for each piece of equipment.\nIt SHOULD be simple to a user interogating the instance_id how to determine the volume_id, level_id and level_instance_id.\n\ne.g. instance_id = 1001 would be volume_id = 1, level_id = 0 and level_instance_id = 1.\n\n\nbdns_tag Valid Implementations\n\nbdns_tag = abbreviation + “-” + instance_id\nbdns_tag = unique_type_reference + “-” + instance_id\n\n\n\nEquipment Specific Tagging Methodologies\nProjects SHOULD define a method for tagging equipment that is consistent across all equipment types. Projects MAY customise how the tag is constructed based on the equipment type if required."
  },
  {
    "objectID": "index.html#project-configuration",
    "href": "index.html#project-configuration",
    "title": "BDNS-plus (WIP)",
    "section": "Project Configuration",
    "text": "Project Configuration"
  },
  {
    "objectID": "index.html#related-work",
    "href": "index.html#related-work",
    "title": "BDNS-plus (WIP)",
    "section": "Related Work",
    "text": "Related Work\n\nextends BDNS (Building Device Naming Syntax)\nformalises some of the logic outlined by TheFridgeShaman in this discussion"
  },
  {
    "objectID": "examples/index.html",
    "href": "examples/index.html",
    "title": "Simple",
    "section": "",
    "text": "In the examples below, we demonstrate how to generate and display asset tagging data for different types of equipment using the bdns-plus library.",
    "crumbs": [
      "Examples",
      "Simple"
    ]
  },
  {
    "objectID": "examples/index.html#configure-dummy-project",
    "href": "examples/index.html#configure-dummy-project",
    "title": "Simple",
    "section": "Configure Dummy Project",
    "text": "Configure Dummy Project\nBelow we generate some test data for a dummy project that has 1no volume and 5no levels.\n\n\n\n\n\n\nView shared code for generating docs examples. TODO - remove\n\n\n\n\n\nimport pandas as pd\n\n\ndef get_idata_tag_df(header: list[tuple], idata: list[dict]) -&gt; pd.DataFrame:\n    annotated_cols = pd.MultiIndex.from_tuples(header)\n    df_tags = pd.DataFrame(idata).sort_values(by=[\"level\"]).reset_index(drop=True)\n    df_tags.columns = annotated_cols\n    return df_tags\n\n\n\n\n\nCode\nimport pandas as pd\nfrom bdns_plus.gen_idata import gen_config_iref\n\nfrom bdns_plus.tag import bdns_tag, Tag\nfrom bdns_plus.abbreviations import get_asset_abbreviations\nfrom bdns_plus.gen_idata import batch_gen_idata, gen_config_iref\nfrom bdns_plus.models import ConfigIref, GenDefinition, TTagData, ITagData, Config\nfrom bdns_plus.docs import get_idata_tag_table\nfrom IPython.display import Markdown\nimport random\n\n\nLEVEL_MIN, LEVEL_MAX, NO_VOLUMES = -1, 3, 1\nconfig_iref = gen_config_iref(LEVEL_MIN, LEVEL_MAX, NO_VOLUMES).model_dump()\ndf_levels = pd.DataFrame(config_iref[\"levels\"])\ndf_volumes = pd.DataFrame(config_iref[\"volumes\"])\n\ndisplay(Markdown(f\"\"\"\n- level_min = {LEVEL_MIN}\n- level_max = {LEVEL_MAX} \n- no_volumes = {LEVEL_MAX}\"\"\"))\ndisplay(Markdown(\"project config tables:\"))\n\n\n\nlevel_min = -1\nlevel_max = 3\nno_volumes = 3\n\n\n\nproject config tables:\n\n\nLevels\n\n\n\n\n\n\n\n\n\nid\ncode\nname\n\n\n\n\n0\n99\n-1\nBasement 1\n\n\n1\n0\n0\nGround\n\n\n2\n1\n1\nLevel 1\n\n\n3\n2\n2\nLevel 2\n\n\n4\n3\n3\nLevel 3\n\n\n\n\n\n\n\nVolumes\n\n\n\n\n\n\n\n\n\nid\ncode\nname\n\n\n\n\n0\n1\n1\nVolume 1",
    "crumbs": [
      "Examples",
      "Simple"
    ]
  },
  {
    "objectID": "examples/index.html#electrical-distribution-equipment",
    "href": "examples/index.html#electrical-distribution-equipment",
    "title": "Simple",
    "section": "Electrical Distribution Equipment",
    "text": "Electrical Distribution Equipment\nFor the main electrical distribution equipment a reference to every individual item is typically required, and the default tagging procedure whereby the equipment is referenced by its level, volume and level / volume instance is appropriate.\n\n\nCode\ndef get_electrical_system(level_min=-1, level_max=3, no_volumes=1):\n    config_iref = gen_config_iref(level_min, level_max, no_volumes)\n    gen_def1 = GenDefinition(abbreviation=[\"PB\"], no_items=1, on_levels=[0], on_volumes=None)  # 1 pb in GF\n    gen_def2 = GenDefinition(abbreviation=[\"DB\", \"EM\"], no_items=2, on_levels=None, on_volumes=None)  # 2 dbs / floor\n    gen_def3 = GenDefinition(abbreviation=[\"DB\", \"EM\"], no_items=2, on_levels=[0], on_volumes=None)  # 1 pb in GF\n    gen_defs = [gen_def1, gen_def2, gen_def3]\n\n    return batch_gen_idata(gen_defs, config_iref)\n\n\nidata = get_electrical_system(level_min=LEVEL_MIN, level_max=LEVEL_MAX, no_volumes=NO_VOLUMES)\ndf = get_idata_tag_df(*get_idata_tag_table(idata))\ndf.style\n\n\n\n\n\n\n\n \nuser-defined\ngenerated\n\n\n \nabbreviation\nlevel\nlevel_iref\nvolume\nasset_description\nbdns_tag\ntype_tag\ninstance_tag\n\n\n\n\n0\nDB\n-1\n1\n1\nelectric distribution - distribution panel / board\nDB-1991\nDB\nDB/1/-1/1\n\n\n1\nEM\n-1\n1\n1\nmeter - electric meter\nEM-1991\nEM\nEM/1/-1/1\n\n\n2\nDB\n-1\n2\n1\nelectric distribution - distribution panel / board\nDB-1992\nDB\nDB/1/-1/2\n\n\n3\nEM\n-1\n2\n1\nmeter - electric meter\nEM-1992\nEM\nEM/1/-1/2\n\n\n4\nPB\n0\n1\n1\nelectric distribution - panel board\nPB-1001\nPB\nPB/1/0/1\n\n\n5\nDB\n0\n1\n1\nelectric distribution - distribution panel / board\nDB-1001\nDB\nDB/1/0/1\n\n\n6\nEM\n0\n1\n1\nmeter - electric meter\nEM-1001\nEM\nEM/1/0/1\n\n\n7\nDB\n0\n2\n1\nelectric distribution - distribution panel / board\nDB-1002\nDB\nDB/1/0/2\n\n\n8\nEM\n0\n2\n1\nmeter - electric meter\nEM-1002\nEM\nEM/1/0/2\n\n\n9\nDB\n0\n1\n1\nelectric distribution - distribution panel / board\nDB-1001\nDB\nDB/1/0/1\n\n\n10\nDB\n0\n2\n1\nelectric distribution - distribution panel / board\nDB-1002\nDB\nDB/1/0/2\n\n\n11\nEM\n0\n1\n1\nmeter - electric meter\nEM-1001\nEM\nEM/1/0/1\n\n\n12\nEM\n0\n2\n1\nmeter - electric meter\nEM-1002\nEM\nEM/1/0/2\n\n\n13\nDB\n1\n1\n1\nelectric distribution - distribution panel / board\nDB-1011\nDB\nDB/1/1/1\n\n\n14\nEM\n1\n1\n1\nmeter - electric meter\nEM-1011\nEM\nEM/1/1/1\n\n\n15\nDB\n1\n2\n1\nelectric distribution - distribution panel / board\nDB-1012\nDB\nDB/1/1/2\n\n\n16\nEM\n1\n2\n1\nmeter - electric meter\nEM-1012\nEM\nEM/1/1/2\n\n\n17\nDB\n2\n2\n1\nelectric distribution - distribution panel / board\nDB-1022\nDB\nDB/1/2/2\n\n\n18\nDB\n2\n1\n1\nelectric distribution - distribution panel / board\nDB-1021\nDB\nDB/1/2/1\n\n\n19\nEM\n2\n1\n1\nmeter - electric meter\nEM-1021\nEM\nEM/1/2/1\n\n\n20\nEM\n2\n2\n1\nmeter - electric meter\nEM-1022\nEM\nEM/1/2/2\n\n\n21\nDB\n3\n2\n1\nelectric distribution - distribution panel / board\nDB-1032\nDB\nDB/1/3/2\n\n\n22\nDB\n3\n1\n1\nelectric distribution - distribution panel / board\nDB-1031\nDB\nDB/1/3/1\n\n\n23\nEM\n3\n1\n1\nmeter - electric meter\nEM-1031\nEM\nEM/1/3/1\n\n\n24\nEM\n3\n2\n1\nmeter - electric meter\nEM-1032\nEM\nEM/1/3/2",
    "crumbs": [
      "Examples",
      "Simple"
    ]
  },
  {
    "objectID": "examples/index.html#electrical-accessories",
    "href": "examples/index.html#electrical-accessories",
    "title": "Simple",
    "section": "Electrical Accessories",
    "text": "Electrical Accessories\nFor electrical accessories such as sockets and switches, it is more common to simply indicate the type.\n\n\nCode\nmap_abbreviation_description = get_asset_abbreviations()\nli = \"\"\"DSSO\nDSO\nSSSO\nSSO\nFLRB\nINSO\"\"\".split(\"\\n\")\nli_nos = [4, 2, 3, 2, 3, 2] # [random.randint(2, 4) for n in range(0, len(li))]\n# ^ fixed random no's so git doesn't complain\n\ntyps = []\nfor abbreviation, type_ref in zip(li, li_nos):\n    for n in range(1, type_ref):\n        typs.append(TTagData(abbreviation=abbreviation, type_reference=n))\n\ndf_typs = pd.DataFrame([x.model_dump(mode=\"json\") | {\"asset_description\": map_abbreviation_description[x.abbreviation.value]} | {\"type_tag\": Tag(x).type} for x in typs])\ndf_typs = df_typs.fillna(\"\")\ndf_typs.style\n\n\n\n\n\n\n\n \nabbreviation\ntype_reference\ntype_extra\nasset_description\ntype_tag\n\n\n\n\n0\nDSSO\n1\n\noutlet - double switched socket outlet\nDSSO1\n\n\n1\nDSSO\n2\n\noutlet - double switched socket outlet\nDSSO2\n\n\n2\nDSSO\n3\n\noutlet - double switched socket outlet\nDSSO3\n\n\n3\nDSO\n1\n\noutlet - double unswitched socket outlet\nDSO1\n\n\n4\nSSSO\n1\n\noutlet - single switched socket outlet\nSSSO1\n\n\n5\nSSSO\n2\n\noutlet - single switched socket outlet\nSSSO2\n\n\n6\nSSO\n1\n\noutlet - single unswitched socket outlet\nSSO1\n\n\n7\nFLRB\n1\n\noutlet - floor box\nFLRB1\n\n\n8\nFLRB\n2\n\noutlet - floor box\nFLRB2\n\n\n9\nINSO\n1\n\noutlet - industrial (commando) socket outlet\nINSO1",
    "crumbs": [
      "Examples",
      "Simple"
    ]
  },
  {
    "objectID": "examples/index.html#lighting",
    "href": "examples/index.html#lighting",
    "title": "Simple",
    "section": "Lighting",
    "text": "Lighting\nFor light fixtures it is also typical to tag only by type, though it is common to also show additional info like if the fitting is emergency or not (see table below). At later stages, a light fitting will often be uniquely identified to have specific commissioning values (e.g. a single spotlight on a control sytem, or a fitting that must be angled in a specific way), to achieve this just add the volume, level and level_iref parameters as shown in the value above.\n\n\nCode\nli = \"\"\"LT\nDL\nEXIT\nPL\nSL\"\"\".split(\"\\n\")\n\nli_nos = [3, 3, 4, 4, 2] # [random.randint(2, 4) for n in range(0, len(li))]\n# ^ fixed random no's so git doesn't complain\nmap_e = {0:\"\", 1: \"E\"}\ntyps = []\nfor abbreviation, type_ref in zip(li, li_nos):\n    for n in range(1, type_ref):\n        e = map_e[int(1/random.randint(1,5))]\n        if abbreviation == \"EXIT\":\n            e = \"E\"\n        typs.append(TTagData(abbreviation=abbreviation, type_reference=n, type_extra=e))\n\n\n\ndf_typs = pd.DataFrame([x.model_dump(mode=\"json\") | {\"asset_description\": map_abbreviation_description[x.abbreviation.value]} | {\"type_tag\": Tag(x).type} for x in typs])\ndf_typs\n\n\n\n\n\n\n\n\n\nabbreviation\ntype_reference\ntype_extra\nasset_description\ntype_tag\n\n\n\n\n0\nLT\n1\n\nlighting - fixture\nLT1\n\n\n1\nLT\n2\n\nlighting - fixture\nLT2\n\n\n2\nDL\n1\n\nlighting - fixture - downlight\nDL1\n\n\n3\nDL\n2\n\nlighting - fixture - downlight\nDL2\n\n\n4\nEXIT\n1\nE\nlighting - fixture - illuminated exit sign\nEXIT1/E\n\n\n5\nEXIT\n2\nE\nlighting - fixture - illuminated exit sign\nEXIT2/E\n\n\n6\nEXIT\n3\nE\nlighting - fixture - illuminated exit sign\nEXIT3/E\n\n\n7\nPL\n1\nE\nlighting - fixture - pendant\nPL1/E\n\n\n8\nPL\n2\n\nlighting - fixture - pendant\nPL2\n\n\n9\nPL\n3\n\nlighting - fixture - pendant\nPL3\n\n\n10\nSL\n1\n\nlighting - fixture - spot light\nSL1",
    "crumbs": [
      "Examples",
      "Simple"
    ]
  },
  {
    "objectID": "tag-builder.html",
    "href": "tag-builder.html",
    "title": "Tag Builder",
    "section": "",
    "text": "At its simplest, bdns-plus can be used to build tags from data. The simple_tag function takes a dictionary of data and a TagDef object, and returns a tag string. It is directly analogous to the way that tags work in Revit, and the TagDef class is a direct port of the Revit tag definition.\nThe example below shows how an instance tag can be built from a dictionary of data.\nCode\nfrom IPython.display import Markdown, display\n\nfrom bdns_plus.docs import data_as_json_markdown, data_as_yaml_markdown, markdown_callout, summarise_tag_config\nfrom bdns_plus.models import TagDef, TagField\nfrom bdns_plus.tag import simple_tag\n\ntag_def = {\n    \"name\": \"Tag Definition for Ventilation Instances\",\n    \"description\": \"a example tag definition for ventilation instances\",\n    \"fields\": [\n        {\n            \"field_name\": \"abbreviation\",\n            \"field_aliases\": [\n                \"Abbreviation\",\n            ],\n            \"allow_none\": False,\n            \"prefix\": \"\",\n            \"suffix\": \"\",\n            \"zfill\": None,\n            \"regex\": None,\n            \"validator\": None,\n        },\n        {\n            \"field_name\": \"volume\",\n            \"field_aliases\": [\n                \"Volume\",\n            ],\n            \"allow_none\": False,\n            \"prefix\": \".\",\n            \"suffix\": \"\",\n            \"zfill\": None,\n            \"regex\": None,\n            \"validator\": None,\n        },\n        {\n            \"field_name\": \"level\",\n            \"field_aliases\": [\n                \"Level\",\n            ],\n            \"allow_none\": False,\n            \"prefix\": \".\",\n            \"suffix\": \"\",\n            \"zfill\": 2,\n            \"regex\": None,\n            \"validator\": None,\n        },\n        {\n            \"field_name\": \"level_iref\",\n            \"field_aliases\": [\n                \"VolumeLevelInstance\",\n            ],\n            \"allow_none\": False,\n            \"prefix\": \".\",\n            \"suffix\": \"\",\n            \"zfill\": 2,\n            \"regex\": None,\n            \"validator\": None,\n        },\n    ],\n}\n\nitag_def = TagDef(**tag_def)  # or use TagDef.from_dict(tag_def)\n\ndata = {\"abbreviation\": \"AHU\", \"level\": \"GF\", \"level_iref\": 1, \"volume\": \"N\"}\ntag_string = simple_tag(data, tag=itag_def)\n\nyaml_str = data_as_json_markdown(itag_def.model_dump(mode=\"json\"))\nimport pathlib\n\npathlib.Path(\"example\")\n\ntitle = \"Tag Definition as json data. Can be loaded dynamically and configured per project.\"\ndisplay(\n    Markdown(markdown_callout(yaml_str, title=title)),\n)  # This will print the header\ndisplay(Markdown(summarise_tag_config(itag_def)))  # This will print the tag configuration summary\ndisplay(Markdown(\"**Example:**\"))  # This will print the tag string\ndisplay(Markdown(data_as_yaml_markdown(data)))  # This will print the data as YAML markdown\nprint(tag_string)  # Output: AHU.GF.01.N\n\n\n\n\n\n\n\n\nTag Definition as json data. Can be loaded dynamically and configured per project.\n\n\n\n\n\n{\n    \"name\": \"Tag Definition for Ventilation Instances\",\n    \"description\": \"a example tag definition for ventilation instances\",\n    \"fields\": [\n        {\n            \"field_name\": \"abbreviation\",\n            \"field_aliases\": [\n                \"Abbreviation\"\n            ],\n            \"allow_none\": false,\n            \"prefix\": \"\",\n            \"suffix\": \"\",\n            \"zfill\": null,\n            \"regex\": null,\n            \"validator\": null\n        },\n        {\n            \"field_name\": \"volume\",\n            \"field_aliases\": [\n                \"Volume\"\n            ],\n            \"allow_none\": false,\n            \"prefix\": \".\",\n            \"suffix\": \"\",\n            \"zfill\": null,\n            \"regex\": null,\n            \"validator\": null\n        },\n        {\n            \"field_name\": \"level\",\n            \"field_aliases\": [\n                \"Level\"\n            ],\n            \"allow_none\": false,\n            \"prefix\": \".\",\n            \"suffix\": \"\",\n            \"zfill\": 2,\n            \"regex\": null,\n            \"validator\": null\n        },\n        {\n            \"field_name\": \"level_iref\",\n            \"field_aliases\": [\n                \"VolumeLevelInstance\"\n            ],\n            \"allow_none\": false,\n            \"prefix\": \".\",\n            \"suffix\": \"\",\n            \"zfill\": 2,\n            \"regex\": null,\n            \"validator\": null\n        }\n    ]\n}\n\n\n\n\n\nTag Definition for Ventilation Instances\na example tag definition for ventilation instances\nRequired: [abbreviation].[volume].[level].[level_iref]\nAllowed: [abbreviation].[volume].[level].[level_iref]\n\n\nExample:\n\n\nabbreviation: AHU\nlevel: GF\nlevel_iref: 1\nvolume: N\n\n\nAHU.N.GF.01"
  },
  {
    "objectID": "tag-builder.html#serializing-unique-numeric-identifiers",
    "href": "tag-builder.html#serializing-unique-numeric-identifiers",
    "title": "Tag Builder",
    "section": "Serializing Unique Numeric Identifiers",
    "text": "Serializing Unique Numeric Identifiers\nIn the example above, it is demonstrated how a tag can be built from a dictionary of data."
  },
  {
    "objectID": "defaults.html",
    "href": "defaults.html",
    "title": "Defaults",
    "section": "",
    "text": "Type Tag\nDefault Tag Definition for indentifying a unique type of equipment, there is likely to be many instances of a type in the building. Expected to be used when a unique reference to every item is not required. For example, a light fitting type that may be used in many locations.\nRequired: [abbreviation]\nAllowed: [abbreviation][type_reference]/[type_extra]\nInstance Tag\nDefault Tag Definition for indentifying a unique instance of equipment within a building. Expected to be used for adding equipment references to drawings, reports and legends.\nRequired: [abbreviation]/[volume]/[level]/[level_iref]\nAllowed: [abbreviation]/[volume]/[level]/[level_iref]/[instance_extra]\nBDNS Tag\nTagDef Definition in accordance with Building Data Naming System\nRequired: [abbreviation]-[instance_reference]\nAllowed: [country]-[city]-[project]-[abbreviation]-[instance_reference]_[instance_extra]\nThe instance reference for the BDNS tag is constructed from volume and level data as follows:\n\nVolumes are represented by 1no integer digits (volume_id).\nLevels are represented by 2no integer digits (level_id).\nAn enumerating integer value is added to ensure uniqueness for a given floor / level (level_instance_id).\nThese numbers are joined without delimiter to create a unique number for a given abbreviation:\n\n[volume_id][level_id][level_instance_id]"
  },
  {
    "objectID": "defaults.html#levels-and-volumes",
    "href": "defaults.html#levels-and-volumes",
    "title": "Defaults",
    "section": "Levels and Volumes",
    "text": "Levels and Volumes\nYou see that levels and volumes are set to None by default. In the background, bdns-plus generates levels and volumes tables supporting all numeric combinations where the level can be encoded by 2no integer digits and the volume can be encoded by 1no integer digit &gt;= 1. See (?@tbl-levels) and (?@tbl-volumes).\n\n\n\n\n\n\n\n\n\nid\ncode\nname\n\n\n\n\n0\n1\n1\nVolume 1\n\n\n1\n2\n2\nVolume 2\n\n\n2\n3\n3\nVolume 3\n\n\n3\n4\n4\nVolume 4\n\n\n4\n5\n5\nVolume 5\n\n\n5\n6\n6\nVolume 6\n\n\n6\n7\n7\nVolume 7\n\n\n7\n8\n8\nVolume 8\n\n\n8\n9\n9\nVolume 9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ncode\nname\n\n\n\n\n0\n90\n-10\nBasement 10\n\n\n1\n91\n-9\nBasement 9\n\n\n2\n92\n-8\nBasement 8\n\n\n3\n93\n-7\nBasement 7\n\n\n4\n94\n-6\nBasement 6\n\n\n...\n...\n...\n...\n\n\n95\n85\n85\nLevel 85\n\n\n96\n86\n86\nLevel 86\n\n\n97\n87\n87\nLevel 87\n\n\n98\n88\n88\nLevel 88\n\n\n99\n89\n89\nLevel 89\n\n\n\n\n100 rows × 3 columns\n\n\n\nSetting the levels and volumes explicitly allows users to:\n\nrestrict the allowed values to a more limited set, and ensure compliance with that set\nextend the levels / volumes for extremely large projects (i.e. &gt;90 floors, &gt;9 basement floors, &gt;9 volumes).\nadd encodings for things like mezzanine levels (though this is not recommended)"
  },
  {
    "objectID": "customisations.html",
    "href": "customisations.html",
    "title": "Customisations",
    "section": "",
    "text": "bdns-plus is designed to “just-work” and assumes a set of sensible defaults. That said, it is also possible to configure bdns-plus to better suit your projects requirements. Configuration is achieved through the setting of environment variables, defined below."
  },
  {
    "objectID": "customisations.html#configuration-properties",
    "href": "customisations.html#configuration-properties",
    "title": "Customisations",
    "section": "Configuration Properties",
    "text": "Configuration Properties\n\n\n\nBDNS_VERSION (string): BDNS version. Allows a project to pin to a specifc version. Default: \"master\".\nABBREVIATIONS_CUSTOM: Custom abbreviations file. Allows project additions and modifications to BDNS abbreviations register. Default: null.\n\nAny of\n\nstring, format: path\nnull\n\n\nLEVELS: allows user to define only levels present in the project. Default: null.\n\nAny of\n\nstring, format: path\nnull\n\n\nVOLUMES: allows user to define only volumes present in the project. Default: null.\n\nAny of\n\nstring, format: path\nnull\n\n\n\n\n\nBy default, they are set as follows:\n\n\nBDNS_VERSION: master\nABBREVIATIONS_CUSTOM: null\nLEVELS: null\nVOLUMES: null\nABBREVIATIONS_BDNS: https://raw.githubusercontent.com/theodi/BDNS/master/BDNS_Abbreviations_Register.csv\nABBREVIATIONS_BDNS_REPO: https://github.com/theodi/BDNS/blob/master/BDNS_Abbreviations_Register.csv"
  },
  {
    "objectID": "examples/custom-project-example.html",
    "href": "examples/custom-project-example.html",
    "title": "Custom Project Example",
    "section": "",
    "text": "View shared code for generating docs examples\n\n\n\n\n\nimport pandas as pd\n\n\ndef get_idata_tag_df(header: list[tuple], idata: list[dict]) -&gt; pd.DataFrame:\n    annotated_cols = pd.MultiIndex.from_tuples(header)\n    df_tags = pd.DataFrame(idata).sort_values(by=[\"level\"]).reset_index(drop=True)\n    df_tags.columns = annotated_cols\n    return df_tags",
    "crumbs": [
      "Examples",
      "Custom Project Example"
    ]
  },
  {
    "objectID": "examples/custom-project-example.html#ventilation-equipment-with-project-specific-format",
    "href": "examples/custom-project-example.html#ventilation-equipment-with-project-specific-format",
    "title": "Custom Project Example",
    "section": "Ventilation Equipment with Project specific format",
    "text": "Ventilation Equipment with Project specific format\nFor a specific project, there was a requirement to construct the tags for ventilation equipment as follows:\n\n...\n\nsee examples:\n\nAHU.W.00.01 (AHU in West stand, Level 0, the first AHU)\nMVHW.W.01.03 (MVHW in West stand, Level 1, the third MVHW)\nTEF.E.02.01 (…)\nKEF.E.03.02\n\n\n\nCode\nimport pandas as pd\nimport csv\nfrom IPython.display import Markdown\n\nfrom bdns_plus.docs import data_as_yaml_markdown\nfrom bdns_plus.gen_idata import gen_config_iref\nfrom bdns_plus.tag import bdns_tag, Tag\nfrom bdns_plus.abbreviations import get_asset_abbreviations\nfrom bdns_plus.gen_idata import batch_gen_idata, gen_config_iref, gen_levels_config, gen_volumes_config\nfrom bdns_plus.models import ConfigIref, GenDefinition, TTagData, Level, Volume\n\nLEVEL_MIN, LEVEL_MAX = 0, 3\nlevel_min, level_max = LEVEL_MIN, LEVEL_MAX\n\nheader=[\"code\", \"id\", \"name\"]\ncsv_str = \"\"\"N,1,North Block\nE,2,East Block\nS,3,South Block\nW,4,North Block\"\"\"\nrows = list(csv.reader(csv_str.strip().splitlines()))\nvolumes = [Volume(**dict(zip(header,x) )) for x in rows]\n_ = gen_levels_config(level_min=level_min, level_max=level_max)\nlevels = [Level(**dict(zip(_[0],x) )) for x in _[1:]]\nconfig_iref = ConfigIref(levels=levels,volumes=volumes)\n\n\nLevels\n\n\n\n\n\n\n\n\n\ncode\nname\n\n\nid\n\n\n\n\n\n\n0\n0\nGround\n\n\n1\n1\nLevel 1\n\n\n2\n2\nLevel 2\n\n\n3\n3\nLevel 3\n\n\n\n\n\n\n\nVolumes\n\n\n\n\n\n\n\n\n\ncode\nname\n\n\nid\n\n\n\n\n\n\n1\nN\nNorth Block\n\n\n2\nE\nEast Block\n\n\n3\nS\nSouth Block\n\n\n4\nW\nNorth Block",
    "crumbs": [
      "Examples",
      "Custom Project Example"
    ]
  },
  {
    "objectID": "examples/custom-project-example.html#setup-custom-tags",
    "href": "examples/custom-project-example.html#setup-custom-tags",
    "title": "Custom Project Example",
    "section": "Setup custom Tags",
    "text": "Setup custom Tags\nTags are built from metadata on the object. bdns_plus has sensible defaults but tag definitions can also be defined to suit the requirements of a specific project.\n\n\nCode\nfrom bdns_plus.models import TagDef, TagField, Config\nfrom bdns_plus.default_fields import abbreviation_field, volume_field, level_field, level_instance_field, instance_extra_field\nfrom bdns_plus.docs import get_idata_tag_table\n\n\n\nfields = [\n    abbreviation_field(suffix=\".\"),\n    volume_field(suffix=\".\"),\n    level_field(suffix=\".\", zfill=2),\n    level_instance_field(suffix=\".\", zfill=2),\n    instance_extra_field(),\n]\n\nitag_def = TagDef(\n    name=\"vent instances\",\n    description=\"for xxx project\",\n    fields = fields,\n)\n\n# Markdown(data_as_yaml_markdown(itag_def.model_dump(mode=\"json\")))\npd.DataFrame([x.model_dump() for x in itag_def.fields])\n\n\n\n\n\n\n\n\n\nfield_name\nfield_aliases\nallow_none\nprefix\nsuffix\nzfill\nregex\nvalidator\n\n\n\n\n0\nabbreviation\n[Abbreviation]\nFalse\n\n.\nNaN\nNone\nNone\n\n\n1\nvolume\n[Volume]\nFalse\n\n.\nNaN\nNone\nNone\n\n\n2\nlevel\n[Level]\nFalse\n\n.\n2.0\nNone\nNone\n\n\n3\nlevel_iref\n[LevelInstance, level_instance]\nFalse\n\n.\n2.0\nNone\nNone\n\n\n4\ninstance_extra\n[InstanceExtra]\nTrue\n\n\nNaN\nNone\nNone\n\n\n\n\n\n\n\n\n\nCode\ngen_def1 = GenDefinition(abbreviation=[\"AHU\"], no_items=1, on_levels=[0], on_volumes=None)\ngen_def2 = GenDefinition(abbreviation=[\"MVHR\", \"TEF\"], no_items=1, on_levels=None, on_volumes=None) \ngen_def3 = GenDefinition(abbreviation=[\"KEF\", \"FAN\"], no_items=2, on_levels=[0], on_volumes=[\"N\"])\ngen_defs = [gen_def1, gen_def2, gen_def3]\nidata = batch_gen_idata(gen_defs, config_iref)\nconfig = Config(**config_iref.model_dump(), i_tag=itag_def)\nget_idata_tag_df(*get_idata_tag_table(idata, config=config))\n\n\n\n\n\n\n\n\n\nuser-defined\ngenerated\n\n\n\nabbreviation\nlevel\nlevel_iref\nvolume\nasset_description\nbdns_tag\ntype_tag\ninstance_tag\n\n\n\n\n0\nAHU\n0\n1\nN\nair handling unit - air handling unit\nAHU-101\nAHU\nAHU.N.00.01\n\n\n1\nAHU\n0\n1\nE\nair handling unit - air handling unit\nAHU-201\nAHU\nAHU.E.00.01\n\n\n2\nAHU\n0\n1\nS\nair handling unit - air handling unit\nAHU-301\nAHU\nAHU.S.00.01\n\n\n3\nAHU\n0\n1\nW\nair handling unit - air handling unit\nAHU-401\nAHU\nAHU.W.00.01\n\n\n4\nMVHR\n0\n1\nN\nair handling - mechanical ventilation with hea...\nMVHR-101\nMVHR\nMVHR.N.00.01\n\n\n5\nTEF\n0\n1\nN\nfan - toilet extract fan\nTEF-101\nTEF\nTEF.N.00.01\n\n\n6\nMVHR\n0\n1\nE\nair handling - mechanical ventilation with hea...\nMVHR-201\nMVHR\nMVHR.E.00.01\n\n\n7\nTEF\n0\n1\nE\nfan - toilet extract fan\nTEF-201\nTEF\nTEF.E.00.01\n\n\n8\nTEF\n0\n1\nW\nfan - toilet extract fan\nTEF-401\nTEF\nTEF.W.00.01\n\n\n9\nMVHR\n0\n1\nW\nair handling - mechanical ventilation with hea...\nMVHR-401\nMVHR\nMVHR.W.00.01\n\n\n10\nMVHR\n0\n1\nS\nair handling - mechanical ventilation with hea...\nMVHR-301\nMVHR\nMVHR.S.00.01\n\n\n11\nTEF\n0\n1\nS\nfan - toilet extract fan\nTEF-301\nTEF\nTEF.S.00.01\n\n\n12\nKEF\n0\n1\nN\nfan - kitchen exhaust fan\nKEF-101\nKEF\nKEF.N.00.01\n\n\n13\nFAN\n0\n1\nN\nfan\nFAN-101\nFAN\nFAN.N.00.01\n\n\n14\nKEF\n0\n2\nN\nfan - kitchen exhaust fan\nKEF-102\nKEF\nKEF.N.00.02\n\n\n15\nFAN\n0\n2\nN\nfan\nFAN-102\nFAN\nFAN.N.00.02\n\n\n16\nMVHR\n1\n1\nW\nair handling - mechanical ventilation with hea...\nMVHR-411\nMVHR\nMVHR.W.01.01\n\n\n17\nTEF\n1\n1\nW\nfan - toilet extract fan\nTEF-411\nTEF\nTEF.W.01.01\n\n\n18\nTEF\n1\n1\nS\nfan - toilet extract fan\nTEF-311\nTEF\nTEF.S.01.01\n\n\n19\nMVHR\n1\n1\nS\nair handling - mechanical ventilation with hea...\nMVHR-311\nMVHR\nMVHR.S.01.01\n\n\n20\nTEF\n1\n1\nN\nfan - toilet extract fan\nTEF-111\nTEF\nTEF.N.01.01\n\n\n21\nMVHR\n1\n1\nN\nair handling - mechanical ventilation with hea...\nMVHR-111\nMVHR\nMVHR.N.01.01\n\n\n22\nTEF\n1\n1\nE\nfan - toilet extract fan\nTEF-211\nTEF\nTEF.E.01.01\n\n\n23\nMVHR\n1\n1\nE\nair handling - mechanical ventilation with hea...\nMVHR-211\nMVHR\nMVHR.E.01.01\n\n\n24\nMVHR\n2\n1\nE\nair handling - mechanical ventilation with hea...\nMVHR-221\nMVHR\nMVHR.E.02.01\n\n\n25\nTEF\n2\n1\nE\nfan - toilet extract fan\nTEF-221\nTEF\nTEF.E.02.01\n\n\n26\nMVHR\n2\n1\nW\nair handling - mechanical ventilation with hea...\nMVHR-421\nMVHR\nMVHR.W.02.01\n\n\n27\nTEF\n2\n1\nW\nfan - toilet extract fan\nTEF-421\nTEF\nTEF.W.02.01\n\n\n28\nTEF\n2\n1\nS\nfan - toilet extract fan\nTEF-321\nTEF\nTEF.S.02.01\n\n\n29\nMVHR\n2\n1\nS\nair handling - mechanical ventilation with hea...\nMVHR-321\nMVHR\nMVHR.S.02.01\n\n\n30\nMVHR\n2\n1\nN\nair handling - mechanical ventilation with hea...\nMVHR-121\nMVHR\nMVHR.N.02.01\n\n\n31\nTEF\n2\n1\nN\nfan - toilet extract fan\nTEF-121\nTEF\nTEF.N.02.01\n\n\n32\nMVHR\n3\n1\nS\nair handling - mechanical ventilation with hea...\nMVHR-331\nMVHR\nMVHR.S.03.01\n\n\n33\nTEF\n3\n1\nS\nfan - toilet extract fan\nTEF-331\nTEF\nTEF.S.03.01\n\n\n34\nTEF\n3\n1\nE\nfan - toilet extract fan\nTEF-231\nTEF\nTEF.E.03.01\n\n\n35\nMVHR\n3\n1\nE\nair handling - mechanical ventilation with hea...\nMVHR-231\nMVHR\nMVHR.E.03.01\n\n\n36\nTEF\n3\n1\nN\nfan - toilet extract fan\nTEF-131\nTEF\nTEF.N.03.01\n\n\n37\nMVHR\n3\n1\nN\nair handling - mechanical ventilation with hea...\nMVHR-131\nMVHR\nMVHR.N.03.01\n\n\n38\nTEF\n3\n1\nW\nfan - toilet extract fan\nTEF-431\nTEF\nTEF.W.03.01\n\n\n39\nMVHR\n3\n1\nW\nair handling - mechanical ventilation with hea...\nMVHR-431\nMVHR\nMVHR.W.03.01",
    "crumbs": [
      "Examples",
      "Custom Project Example"
    ]
  }
]